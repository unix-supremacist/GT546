/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * For more details, see https://docs.gradle.org/7.6/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {
    api("com.github.GTNewHorizons:StructureLib:1.2.1:dev")

    api("com.github.GTNewHorizons:NotEnoughItems:2.3.28-GTNH:dev")
    api("com.github.GTNewHorizons:GTNHLib:0.0.12:dev")
    api("com.github.GTNewHorizons:ModularUI:1.1.2:dev")
    api("com.github.GTNewHorizons:waila:1.5.23:dev")
    api("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-beta-156-GTNH:dev")
    implementation("com.github.GTNewHorizons:Eternal-Singularity:1.0.10:dev")

    api("net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev")
    runtimeOnly ("com.gregoriust.gregtech:gregtech_1.7.10:6.15.10:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:EnderCore:0.2.12:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ForestryMC:4.5.6:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:gendustry:1.6.5.5-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Railcraft:9.13.18:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Galacticraft:3.0.65-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:AppleCore:3.2.10:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:TinkersConstruct:1.9.23-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Chisel:2.10.17-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:EnderIO:2.3.1.57:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:BuildCraft:7.1.28:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Translocators:1.1.2.21:dev") { transitive = false }
    compileOnly("curse.maven:cofh-core-69162:2388751") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Nuclear-Control:2.4.16:dev") { transitive = false }
    compileOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Avaritia:1.31:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ProjectRed:4.7.9-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Hodgepodge:2.0.34:dev") { transitive = false }

    // fix universium animation
    runtimeOnly("com.github.GTNewHorizons:Avaritia:1.33:dev")

    compileOnly("com.google.auto.value:auto-value-annotations:1.10.1") { transitive = false }
    annotationProcessor("com.google.auto.value:auto-value:1.10.1")

    testImplementation(platform('org.junit:junit-bom:5.9.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}
